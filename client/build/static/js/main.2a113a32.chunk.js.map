{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","result","setResult","percentage","textPercentage","Object","keys","length","value","toFixed","className","xs","xl","name","onFinish","values","fetch","method","headers","body","JSON","stringify","passager","then","response","json","validateMessages","required","types","email","number","range","Item","label","rules","Group","map","c","index","key","span","type","min","max","e","wrapperCol","offset","htmlType","Text","href","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a113a32.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Form, InputNumber, Button, Radio, Row, Col } from 'antd';\r\nimport { Text,Linking  } from \"react-native\";\r\nimport \"antd/dist/antd.css\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n  const validateMessages = {\r\n    required: '${label} is required!',\r\n    types: {\r\n      email: '${label} is not validate email!',\r\n      number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n      range: '${label} must be between ${min} and ${max}',\r\n    },\r\n  };\r\n\r\n   const onFinish = values => {\r\n    fetch(\"https://titanic-web-ml.herokuapp.com/predict\", {\r\n        method:\"POST\",\r\n        headers:{\"Content-Type\":\"application/json\"},\r\n        body:JSON.stringify(values.passager)\r\n        }\r\n    ).then(response => {return response.json()})\r\n    .then(json => {setResult(json)})\r\n  };\r\n\r\n  const [result, setResult] = useState({});\r\n  const pclass = [1,2,3]\r\n  const embarked = [\"C\",\"Q\",\"S\"]\r\n  const percentage = result.percentage * 100\r\n  const textPercentage = Object.keys(result).length === 0 ? \"\": `${result.value} with ${percentage.toFixed(2)} %`\r\n\r\n  return (\r\n    <div className=\"page-container\">\r\n      <div className=\"container content-wrap\">\r\n      <Row className=\"title\">\r\n      Titanic Survivors\r\n      </Row>\r\n      <Row>\r\n      <Col xs={24} xl={12}>\r\n      <Form name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n        \r\n        <Row>\r\n        <Form.Item name={['passager','pclass']}\r\n          label='P-class'\r\n          rules={[\r\n            {\r\n              required: true,\r\n            },\r\n          ]}\r\n        >\r\n          <Radio.Group>\r\n            {pclass.map((c,index) => (<Radio key={index} value={c}>{c}st Ticket class</Radio>))}\r\n          </Radio.Group>\r\n        </Form.Item>\r\n        </Row>\r\n        <Row>\r\n          <Col span={12}>\r\n          <Form.Item\r\n            name={['passager', 'fare']}\r\n            label=\"Fare\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                type: 'number',\r\n                min: 0,\r\n                max: 513.000,\r\n              },\r\n            ]}\r\n          >\r\n            <InputNumber />\r\n          </Form.Item>\r\n\r\n          </Col>\r\n          <Col span={12}>\r\n           <Form.Item\r\n            name={['passager', 'age']}\r\n            label=\"Age\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                type: 'number',\r\n                min: 0,\r\n                max: 80,\r\n              },\r\n            ]}\r\n          >\r\n            <InputNumber />\r\n          </Form.Item>\r\n          </Col>\r\n        </Row>\r\n\r\n\r\n        <Row>\r\n        <Col span={12}>\r\n        <Form.Item\r\n          name={['passager', 'sibsp']}\r\n          label=\"Sibps\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              type: 'number',\r\n              min: 0,\r\n              max: 8,\r\n            },\r\n          ]}\r\n        >\r\n          <InputNumber />\r\n        </Form.Item>\r\n        </Col>\r\n        <Col span={12}>\r\n         <Form.Item\r\n          name={['passager', 'parch']}\r\n          label=\"Parch\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              type: 'number',\r\n              min: 0,\r\n              max: 6,\r\n            },\r\n          ]}\r\n        >\r\n          <InputNumber />\r\n        </Form.Item>\r\n        </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n        <Col span={12}>\r\n\r\n        <Form.Item name={['passager','sex']}\r\n          label=\"Sex\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n            },\r\n          ]}\r\n        >\r\n          <Radio.Group>\r\n            <Radio value=\"female\">Female</Radio>\r\n            <Radio value=\"male\">Male</Radio>\r\n          </Radio.Group>\r\n        </Form.Item>\r\n\r\n\r\n        </Col>\r\n        <Col span={12}>\r\n\r\n        <Form.Item name={['passager','embarked']}\r\n          label='Embarked'\r\n          rules={[\r\n            {\r\n              required: true,\r\n            },\r\n          ]}\r\n        >\r\n          <Radio.Group>\r\n            {embarked.map((e,index) => (<Radio key={index} value={e}>{e}</Radio>))}\r\n          </Radio.Group>\r\n        </Form.Item>\r\n\r\n        </Col>\r\n        </Row>\r\n        <Form.Item\r\n            wrapperCol={{\r\n              span: 12,\r\n              offset: 6\r\n            }}\r\n          >\r\n         <Button type=\"primary\" htmlType=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n      </Col>\r\n      <Col className=\"answer\" xs={24} xl={12}>\r\n      Would you survive? {textPercentage}\r\n      </Col>\r\n      </Row>\r\n      <Row className=\"legend\">\r\n        <Text>\r\n        <h5>About:</h5>\r\n          This is a <a href=\"https://www.kaggle.com/c/titanic\" target=\"_blank\">titanic disaster</a> solution. This proposal predict whether a passenger will be able to survive the disaster\r\n        </Text>\r\n        <Text>\r\n          <h5>Form description:</h5>\r\n          <ul>\r\n            <li>Pclass - Ticket class (A proxy for socio-economic status) 1 = Upper, 2 = Middle, 3 = Lower</li>\r\n            <li>Fare - Ticket value</li>\r\n            <li>Age - Age in years </li>\r\n            <li>Sibps - Number of siblings / spouses aboard the Titanic </li>\r\n            <li>Parch - Number of parents / children aboard the Titanic </li>\r\n            <li>Sex - Sex </li>\r\n            <li>Embarked - Port of Embarkation C = Cherbourg, Q = Queenstown, S = Southampton</li>\r\n          </ul>\r\n        </Text>\r\n        <Text><h5>Algorithm:</h5>\r\n        As a predictor, a logistic regression with 81% accuracy was used.\r\n        </Text>\r\n      </Row>\r\n      </div>\r\n      <footer className=\"footer\">\r\n      Created By - <a href=\"https://github.com/viniCerutti\" target=\"_blank\"> Vinicius Cerutti </a>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}