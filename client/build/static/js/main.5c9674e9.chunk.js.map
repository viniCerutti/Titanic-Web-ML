{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","result","setResult","percentage","textPercentage","Object","keys","length","value","toFixed","className","xs","xl","name","onFinish","values","fetch","method","headers","body","JSON","stringify","passager","then","response","json","validateMessages","required","types","email","number","range","Item","label","rules","Group","map","c","index","key","span","type","min","max","e","wrapperCol","offset","htmlType","Text","href","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5c9674e9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Form, InputNumber, Button, Radio, Row, Col } from 'antd';\nimport { Text,Linking  } from \"react-native\";\nimport \"antd/dist/antd.css\";\nimport './App.css';\n\nfunction App() {\n\n  const validateMessages = {\n    required: '${label} is required!',\n    types: {\n      email: '${label} is not validate email!',\n      number: '${label} is not a validate number!',\n    },\n    number: {\n      range: '${label} must be between ${min} and ${max}',\n    },\n  };\n\n   const onFinish = values => {\n    fetch(\"https://titanic-web-ml.herokuapp.com/predict\", {\n        method:\"POST\",\n        headers:{\"Content-Type\":\"application/json\"},\n        body:JSON.stringify(values.passager)\n        }\n    ).then(response => {return response.json()})\n    .then(json => {setResult(json)})\n  };\n\n  const [result, setResult] = useState({});\n  const pclass = [1,2,3]\n  const embarked = [\"C\",\"Q\",\"S\"]\n  const percentage = result.percentage * 100\n  const textPercentage = Object.keys(result).length === 0 ? \"\": `${result.value} with ${percentage.toFixed(2)} %`\n\n  return (\n    <div className=\"page-container\">\n      <div className=\"container content-wrap\">\n      <Row className=\"title\">\n      Titanic Survivors\n      </Row>\n      <Row>\n      <Col xs={24} xl={12}>\n      <Form name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\n        \n        <Row>\n        <Form.Item name={['passager','pclass']}\n          label='P-class'\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Radio.Group>\n            {pclass.map((c,index) => (<Radio key={index} value={c}>{c}st Ticket class</Radio>))}\n          </Radio.Group>\n        </Form.Item>\n        </Row>\n        <Row>\n          <Col span={12}>\n          <Form.Item\n            name={['passager', 'fare']}\n            label=\"Fare\"\n            rules={[\n              {\n                required: true,\n                type: 'number',\n                min: 0,\n                max: 513.000,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n\n          </Col>\n          <Col span={12}>\n           <Form.Item\n            name={['passager', 'age']}\n            label=\"Age\"\n            rules={[\n              {\n                required: true,\n                type: 'number',\n                min: 0,\n                max: 80,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n          </Col>\n        </Row>\n\n\n        <Row>\n        <Col span={12}>\n        <Form.Item\n          name={['passager', 'sibsp']}\n          label=\"Sibps\"\n          rules={[\n            {\n              required: true,\n              type: 'number',\n              min: 0,\n              max: 8,\n            },\n          ]}\n        >\n          <InputNumber />\n        </Form.Item>\n        </Col>\n        <Col span={12}>\n         <Form.Item\n          name={['passager', 'parch']}\n          label=\"Parch\"\n          rules={[\n            {\n              required: true,\n              type: 'number',\n              min: 0,\n              max: 6,\n            },\n          ]}\n        >\n          <InputNumber />\n        </Form.Item>\n        </Col>\n        </Row>\n\n        <Row>\n        <Col span={12}>\n\n        <Form.Item name={['passager','sex']}\n          label=\"Sex\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Radio.Group>\n            <Radio value=\"female\">Female</Radio>\n            <Radio value=\"male\">Male</Radio>\n          </Radio.Group>\n        </Form.Item>\n\n\n        </Col>\n        <Col span={12}>\n\n        <Form.Item name={['passager','embarked']}\n          label='Embarked'\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Radio.Group>\n            {embarked.map((e,index) => (<Radio key={index} value={e}>{e}</Radio>))}\n          </Radio.Group>\n        </Form.Item>\n\n        </Col>\n        </Row>\n        <Form.Item\n            wrapperCol={{\n              span: 12,\n              offset: 6\n            }}\n          >\n         <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n      </Col>\n      <Col className=\"answer\" xs={24} xl={12}>\n      Would you survive? {textPercentage}\n      </Col>\n      </Row>\n      <Row className=\"legend\">\n        <Text>\n        <h5>About:</h5>\n          This is a <a href=\"https://www.kaggle.com/c/titanic\" target=\"_blank\">titanic disaster</a> solution. This proposal predict whether a passenger will be able to survive the disaster\n        </Text>\n        <Text>\n          <h5>Form description:</h5>\n          <ul>\n            <li>Pclass - Ticket class (A proxy for socio-economic status) 1 = Upper, 2 = Middle, 3 = Lower</li>\n            <li>Fare - Ticket value</li>\n            <li>Age - Age in years </li>\n            <li>Sibps - Number of siblings / spouses aboard the Titanic </li>\n            <li>Parch - Number of parents / children aboard the Titanic </li>\n            <li>Sex - Sex </li>\n            <li>Embarked - Port of Embarkation C = Cherbourg, Q = Queenstown, S = Southampton</li>\n          </ul>\n        </Text>\n        <Text><h5>Algorithm:</h5>\n        As a predictor, a logistic regression with 80% accuracy was used.\n        </Text>\n      </Row>\n      </div>\n      <footer className=\"footer\">\n      Created By - <a href=\"https://github.com/viniCerutti\" target=\"_blank\"> Vinicius Cerutti </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}